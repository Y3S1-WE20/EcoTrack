/**
 * Enhanced EcoTrack AI Chat Controller with Multilingual Support
 */

const ecotrackAI = require('../services/ecotrackAI');

// Language detection patterns
const SINHALA_PATTERNS = [
  /[\u0D80-\u0DFF]/,  // Sinhala Unicode block
  /(?:‡∂∏‡∂∏|‡∂î‡∂∂|‡∂ö‡∂ª‡∂±‡∑ä‡∂±|‡∂ö‡∑ú‡∑Ñ‡∑ú‡∂∏‡∂Ø|‡∂ú‡∑ê‡∂±|‡∑Ä‡∂ú‡∑ö|‡∂≠‡∑í‡∂∫‡∑ô‡∂±‡∑ä‡∂±‡∑ö|‡∂ë‡∂ö|‡∂Ø‡∑ô‡∂ö|‡∂≠‡∑î‡∂±|‡∑Ñ‡∂≠‡∂ª|‡∂¥‡∑Ñ)/,  // Common Sinhala words
  /(?:‡∂ö‡∑í‡∂∫‡∂±‡∑ä‡∂±|‡∂ë‡∂±‡∑ä‡∂±|‡∂∫‡∂±‡∑ä‡∂±|‡∂á‡∑Ä‡∑í‡∂≠‡∑ä|‡∂ú‡∑í‡∂∫‡∑è|‡∂ö‡∑Ö‡∑è|‡∂ö‡∂ª‡∂±‡∑Ä‡∑è|‡∂≠‡∑í‡∂∫‡∑ô‡∂±‡∑Ä‡∑è)/,  // Sinhala verbs
];

const ENGLISH_PATTERNS = [
  /^[a-zA-Z\s\d\.,!?;:'"()-]*$/,  // Only English characters, numbers, and punctuation
];

/**
 * Detect the language of input text
 */
const detectLanguage = (text) => {
  const cleanText = text.trim();
  
  // Check for Sinhala
  for (const pattern of SINHALA_PATTERNS) {
    if (pattern.test(cleanText)) {
      return 'si'; // Sinhala
    }
  }
  
  // Check for English (fallback)
  for (const pattern of ENGLISH_PATTERNS) {
    if (pattern.test(cleanText)) {
      return 'en'; // English
    }
  }
  
  return 'auto'; // Mixed or unknown
};

/**
 * Get system prompt based on language
 */
const getSystemPrompt = (language) => {
  if (language === 'si') {
    return `‡∂î‡∂∂ EcoTrack ‡∂±‡∂∏‡∑ä ‡∂¥‡∂ª‡∑í‡∑É‡∂ª ‡∑Ñ‡∑í‡∂≠‡∂ö‡∑è‡∂∏‡∑ì AI ‡∑É‡∑Ñ‡∑è‡∂∫‡∂ö‡∂∫‡∑ô‡∂ö‡∑í. ‡∂î‡∂∂‡∂ú‡∑ö ‡∂ö‡∑è‡∂ª‡∑ä‡∂∫‡∂∫:

1. ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä‡∑ô‡∂±‡∑ä ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑ì‡∂∏
2. ‡∂ö‡∑è‡∂∂‡∂±‡∑ä ‡∂Ö‡∂©‡∑î‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ä ‡∂ú‡∂´‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
3. ‡∂¥‡∂ª‡∑í‡∑É‡∂ª ‡∑Ñ‡∑í‡∂≠‡∂ö‡∑è‡∂∏‡∑ì ‡∂¢‡∑ì‡∑Ä‡∂± ‡∑Ä‡∑í‡∂Ω‡∑è‡∑É‡∂∫ ‡∂ú‡∑ê‡∂± ‡∂ã‡∂¥‡∂Ø‡∑ô‡∑É‡∑ä ‡∂Ø‡∑ì‡∂∏
4. ‡∂Ø‡∑õ‡∂±‡∑í‡∂ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂ö‡∑è‡∂ª‡∂ö‡∂∏‡∑ä ‡∂ß‡∑ä‚Äç‡∂ª‡∑ê‡∂ö‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏

‡∂ú‡∂∏‡∂±‡∑ä: '‡∂∏‡∂∏ ‡∂ö‡∑í‡∂Ω‡∑ù‡∂∏‡∑ì‡∂ß‡∂ª‡∑ä 10 ‡∂ö‡∑ä ‡∑Ä‡∑è‡∑Ñ‡∂±‡∂∫‡∑ô‡∂±‡∑ä ‡∂ú‡∑í‡∂∫‡∑è' = 2.3 kg CO‚ÇÇ
‡∂¥‡∑ú‡∂Ø‡∑î ‡∂¥‡∑ä‚Äç‡∂ª‡∑Ä‡∑è‡∑Ñ‡∂±‡∂∫: '‡∂∏‡∂∏ ‡∂∂‡∑É‡∑ä ‡∂ë‡∂ö‡∑ö ‡∂ú‡∑í‡∂∫‡∑è' = CO‚ÇÇ ‡∂Ö‡∂©‡∑î‡∑Ä‡∑ì‡∂∏
‡∂¥‡∂∫‡∑í‡∂±‡∑ä ‡∂ú‡∂∏‡∂±‡∑ä: '‡∂∏‡∂∏ ‡∂ö‡∑í‡∂Ω‡∑ù‡∂∏‡∑ì‡∂ß‡∂ª‡∑ä 5 ‡∂ö‡∑ä ‡∂á‡∑Ä‡∑í‡∂Ø‡∑ä‡∂Ø‡∑è' = CO‚ÇÇ ‡∂Ö‡∂©‡∑î‡∑Ä‡∑ì‡∂∏

‡∑É‡∑ë‡∂∏ ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∂ö‡∂∏ ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω‡∑ô‡∂±‡∑ä ‡∂Ω‡∑í‡∂∫‡∂±‡∑ä‡∂±. ‡∑É‡∂ª‡∂Ω ‡∑Ñ‡∑è ‡∂∏‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∑Å‡∑ì‡∂Ω‡∑ì ‡∑Ä‡∂±‡∑ä‡∂±.`;
  }
  
  return `You are EcoTrack, a friendly environmental AI assistant. You help users:

1. Track daily activities and calculate carbon impact
2. Provide eco-friendly living advice  
3. Answer environmental questions
4. Support sustainable lifestyle choices

For driving: "I drove 10 km" = calculate ~2.3 kg CO‚ÇÇ
For public transport: "I took the bus" = CO‚ÇÇ savings
For walking/cycling: "I walked 5 km" = CO‚ÇÇ savings  

Always be encouraging and provide actionable eco-tips!`;
};

/**
 * Process multimedia attachments
 */
const processAttachments = async (attachments) => {
  if (!attachments || attachments.length === 0) {
    return '';
  }

  const attachmentDescriptions = [];

  for (const attachment of attachments) {
    switch (attachment.type) {
      case 'image':
        attachmentDescriptions.push(`[User shared an image: ${attachment.name || 'image'}]`);
        break;
      case 'document':
        attachmentDescriptions.push(`[User shared a document: ${attachment.name || 'document'}]`);
        break;
      case 'voice':
        attachmentDescriptions.push(`[User sent a voice message]`);
        break;
    }
  }

  return attachmentDescriptions.join(' ');
};

/**
 * Enhanced chat message processing with multilingual support
 */
const processEnhancedMessage = async (req, res) => {
  try {
    const { message, attachments, language } = req.body;

    // Validate input
    if ((!message || message.trim().length === 0) && (!attachments || attachments.length === 0)) {
      return res.status(400).json({
        success: false,
        message: 'Please provide a message or attachment',
        error: 'INVALID_INPUT'
      });
    }

    console.log('\nüì® Enhanced chat message received:');
    console.log('Message:', message);
    console.log('Attachments:', attachments?.length || 0);
    console.log('Language hint:', language);

    // Detect language if not provided
    const detectedLanguage = language || detectLanguage(message || '');
    console.log('üåê Detected language:', detectedLanguage);

    // Check AI status
    const aiStatus = ecotrackAI.getStatus();
    console.log('üîç AI Status:', aiStatus);

    if (!ecotrackAI.isReady()) {
      console.log('‚ö†Ô∏è AI not ready, returning error');
      
      const errorMessage = detectedLanguage === 'si' 
        ? 'EcoTrack AI ‡∑É‡∑Ñ‡∑è‡∂∫‡∂ö‡∂∫‡∑è ‡∂Ø‡∑ê‡∂±‡∂ß ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è ‡∂±‡∑ú‡∂ö‡∂ª‡∂∫‡∑í. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑É‡∑î‡∑Ä ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.'
        : 'EcoTrack AI Assistant is currently offline. Please try again in a moment.';
      
      return res.status(503).json({
        success: false,
        message: errorMessage,
        error: 'AI_OFFLINE',
        language: detectedLanguage,
        debug: aiStatus
      });
    }

    // Process attachments
    const attachmentContext = await processAttachments(attachments);
    
    // Combine message with attachment context
    const fullMessage = [message, attachmentContext].filter(Boolean).join(' ');
    
    // Get appropriate system prompt
    const systemPrompt = getSystemPrompt(detectedLanguage);

    // Get AI response with language context
    console.log('üöÄ Sending enhanced message to AI...');
    console.log('System prompt language:', detectedLanguage);
    
    const aiResponse = await ecotrackAI.chatWithContext(fullMessage.trim(), {
      systemPrompt,
      language: detectedLanguage,
      hasAttachments: (attachments && attachments.length > 0)
    });
    
    // Add language metadata to response
    const enhancedResponse = {
      ...aiResponse,
      language: detectedLanguage,
      originalMessage: message,
      processedAttachments: attachments?.length || 0
    };
    
    console.log('üì§ Sending enhanced response to client');
    console.log('Response language:', detectedLanguage);
    
    // Return response
    res.json(enhancedResponse);

  } catch (error) {
    console.error('\n‚ùå Enhanced Chat Controller Error:', error);
    
    const detectedLanguage = detectLanguage(req.body.message || '');
    const errorMessage = detectedLanguage === 'si'
      ? '‡∂ö‡∂´‡∂ú‡∑è‡∂ß‡∑î‡∂∫‡∑í, ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í‡∑Ä‡∑í‡∂∫. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.'
      : 'Sorry, something went wrong. Please try again.';
    
    res.status(500).json({
      success: false,
      message: errorMessage,
      language: detectedLanguage,
      error: 'INTERNAL_ERROR',
      debug: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

/**
 * Original simple chat handler for backward compatibility
 */
const processMessage = async (req, res) => {
  try {
    const { message } = req.body;

    // Validate input
    if (!message || typeof message !== 'string' || message.trim().length === 0) {
      return res.status(400).json({
        success: false,
        message: 'Please provide a valid message',
        error: 'INVALID_INPUT'
      });
    }

    console.log('\nüì® Simple chat message received:', message);

    // Detect language for simple messages too
    const detectedLanguage = detectLanguage(message);
    
    // Check AI status
    const aiStatus = ecotrackAI.getStatus();
    console.log('üîç AI Status:', aiStatus);

    if (!ecotrackAI.isReady()) {
      console.log('‚ö†Ô∏è AI not ready, returning error');
      
      const errorMessage = detectedLanguage === 'si' 
        ? 'EcoTrack AI ‡∑É‡∑Ñ‡∑è‡∂∫‡∂ö‡∂∫‡∑è ‡∂Ø‡∑ê‡∂±‡∂ß ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è ‡∂±‡∑ú‡∂ö‡∂ª‡∂∫‡∑í. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑É‡∑î‡∑Ä ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.'
        : 'EcoTrack AI Assistant is currently offline. Please try again in a moment.';
      
      return res.status(503).json({
        success: false,
        message: errorMessage,
        error: 'AI_OFFLINE',
        language: detectedLanguage,
        debug: aiStatus
      });
    }

    // Get appropriate system prompt
    const systemPrompt = getSystemPrompt(detectedLanguage);

    // Get AI response
    console.log('üöÄ Sending message to AI with language context...');
    const aiResponse = await ecotrackAI.chatWithContext(message.trim(), {
      systemPrompt,
      language: detectedLanguage
    });
    
    // Add language metadata
    const enhancedResponse = {
      ...aiResponse,
      language: detectedLanguage
    };
    
    console.log('üì§ Sending response to client with language:', detectedLanguage);
    
    // Return response
    res.json(enhancedResponse);

  } catch (error) {
    console.error('\n‚ùå Simple Chat Controller Error:', error);
    
    const detectedLanguage = detectLanguage(req.body.message || '');
    const errorMessage = detectedLanguage === 'si'
      ? '‡∂ö‡∂´‡∂ú‡∑è‡∂ß‡∑î‡∂∫‡∑í, ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í‡∑Ä‡∑í‡∂∫. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.'
      : 'Sorry, something went wrong. Please try again.';
    
    res.status(500).json({
      success: false,
      message: errorMessage,
      language: detectedLanguage,
      error: 'INTERNAL_ERROR',
      debug: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

module.exports = {
  processMessage,
  processEnhancedMessage,
  detectLanguage
};